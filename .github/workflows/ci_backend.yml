name: 'CI - Backend'

env:
  IMAGE: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/backend
on:
  workflow_dispatch:
  push:
    branches:
      - 'feature/backend/*'
      - 'fix/backend/*'
  pull_request:
    branches:
      - 'feature/backend/*'
      - 'fix/backend/*'

jobs:
  build:
    name: 'Backend: Build'
    strategy:
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - '3.11'
    defaults:
      run:
        working-directory: backend
    runs-on: ${{ matrix.os }}

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
      - name: 'Set up Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  code-quality:
    name: 'Backend: Code quality'
    needs: build
    strategy:
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - '3.11'
    defaults:
      run:
        working-directory: backend
    runs-on: ${{ matrix.os }}

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
      - name: 'Set up Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: 'Run code quality checks'
        run: |
          pip install "black" "isort"
      - name: 'Lint with Black'
        uses: psf/black@stable
        with:
          options: '--exclude=tests/'
          src: backend/src/
      - name: 'Lint with isort'
        run: |
          isort --check-only --profile black .

  tests:
    name: 'Backend: Tests'
    needs: build
    strategy:
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - '3.11'
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:14.2-alpine
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    ### add env variables
    env:
      BACKEND_SERVER_HOST: ${{ secrets.BACKEND_SERVER_HOST }}
      BACKEND_SERVER_PORT: ${{ secrets.BACKEND_SERVER_PORT }}
      BACKEND_SERVER_WORKERS: ${{ secrets.BACKEND_SERVER_WORKERS }}
      IS_ALLOWED_CREDENTIALS: ${{ secrets.IS_ALLOWED_CREDENTIALS }}
      STATIC_FILE_DIRECTORY: ${{ secrets.STATIC_FILE_DIRECTORY }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      DB_TIMEOUT: ${{ secrets.DB_TIMEOUT }}
      DB_POOL_SIZE: ${{ secrets.DB_POOL_SIZE }}
      DB_MAX_POOL_CON: ${{ secrets.DB_MAX_POOL_CON }}
      DB_POOL_OVERFLOW: ${{ secrets.DB_POOL_OVERFLOW }}
      IS_DB_ASYNC_DRIVER: ${{ secrets.IS_DB_ASYNC_DRIVER }}
      IS_DB_ECHO_LOG: ${{ secrets.IS_DB_ECHO_LOG }}
      IS_DB_EXPIRE_ON_COMMI: ${{ secrets.IS_DB_EXPIRE_ON_COMMI }}
      IS_DB_FORCE_ROLLBACK: ${{ secrets.IS_DB_FORCE_ROLLBACK }}
      API_TOKEN: ${{ secrets.API_TOKEN }}
      AUTH_KEY: ${{ secrets.AUTH_KEY }}
      OAUTH_TOKEN_URL: ${{ secrets.OAUTH_TOKEN_URL }}
      POSTGRES_SCHEMA: ${{ secrets.POSTGRES_SCHEMA }}
      JWT_TOKEN_PREFIX: ${{ secrets.JWT_TOKEN_PREFIX }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      PWD_ALGORITHM_LAYER_1: ${{ secrets.PWD_ALGORITHM_LAYER_1 }}
      PWD_ALGORITHM_LAYER_2: ${{ secrets.PWD_ALGORITHM_LAYER_2 }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_SUBJECT: ${{ secrets.JWT_SUBJECT }}
      JWT_MIN: ${{ secrets.JWT_MIN }}
      JWT_HOUR: ${{ secrets.JWT_HOUR }}
      JWT_DAY: ${{ secrets.JWT_DAY }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
      - name: 'Set up Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: 'Install dependencies for tests'
        run: |
          pip install pytest pytest-asyncio pytest-xdist pytest-cov
      - name: 'Run tests'
        run: |
          pytest --cov --cov-report=xml .

  docker-build:
    name: 'Backend: Docker build'
    needs: [tests, code-quality]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
      - name: 'Login to GitHub Container Registry'
        run: echo {CICD_GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.CICD_GITHUB_TOKEN }}
      - name: 'Pull Image'
        run: docker pull ${{ env.IMAGE }}:latest || true
      - name: 'Build Image'
        run: docker build \
          --cache-from ${{ env.IMAGE }}:latest\
          --tag ${{ env.IMAGE }}:latest . \
          --file ./backend/Dockerfile.production \
          "./backend"
      - name: 'Push Image'
        run: docker push ${{ env.IMAGE }}:latest
